# 論文管理アプリ コーディングルール

## プロジェクト概要
- Next.js 15 + TypeScript + Tailwind CSS
- 論文PDFの管理・解析アプリケーション
- AI機能による情報自動抽出

## コーディング規約

### TypeScript
- 厳密な型定義を使用する
- `any`型の使用は避ける
- インターフェースは`I`プレフィックス、型エイリアスは`T`プレフィックス
- 関数の戻り値型を明示的に定義する
- 非同期関数は`async/await`を使用

### React/Next.js
- 関数コンポーネントを使用
- カスタムフックは`use`プレフィックス
- コンポーネント名はPascalCase
- Propsの型定義は必須
- サーバーコンポーネントとクライアントコンポーネントを適切に使い分ける

### ファイル構造
```
src/
├── app/           # Next.js App Router
├── components/    # 再利用可能なコンポーネント
├── lib/          # ユーティリティ関数
├── types/        # TypeScript型定義
└── hooks/        # カスタムフック
```

### 命名規則
- ファイル名: kebab-case (例: `paper-upload.tsx`)
- コンポーネント名: PascalCase (例: `PaperUpload`)
- 変数・関数名: camelCase
- 定数: UPPER_SNAKE_CASE
- APIルート: RESTful設計

### コード品質
- ESLintルールに従う
- Prettierでフォーマット
- コメントは日本語で記述
- エラーハンドリングを適切に実装
- パフォーマンスを考慮した実装

### セキュリティ
- ユーザー入力の検証を必須
- SQLインジェクション対策
- XSS対策
- CSRF対策
- 認証・認可の適切な実装

### データベース
- Prisma ORMを使用
- マイグレーションは段階的に実行
- インデックスの適切な設定
- 外部キー制約の設定

### AI機能
- OpenAI APIの使用
- エラーハンドリングの実装
- レート制限の考慮
- レスポンスのキャッシュ

### テスト
- 単体テストの実装
- 統合テストの実装
- E2Eテストの実装
- テストカバレッジ80%以上

### パフォーマンス
- 画像最適化
- コード分割
- 遅延読み込み
- キャッシュ戦略

### アクセシビリティ
- WCAG 2.1 AA準拠
- セマンティックHTML
- キーボードナビゲーション
- スクリーンリーダー対応

## 禁止事項
- `console.log`の本番コードへの混入
- ハードコーディングされた値
- 未使用のimport
- 無限ループ
- メモリリークの原因となるコード

## 推奨事項
- エラーメッセージは日本語で分かりやすく
- ログは構造化して記録
- 環境変数の適切な管理
- ドキュメントの充実
